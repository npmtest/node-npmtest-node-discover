{"/home/travis/build/npmtest/node-npmtest-node-discover/test.js":"/* istanbul instrument in package npmtest_node_discover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-discover/lib.npmtest_node_discover.js":"/* istanbul instrument in package npmtest_node_discover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_discover = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_discover = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-discover/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-discover && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_discover */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_discover\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_discover.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_discover.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_discover.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_discover.__dirname + '/lib.npmtest_node_discover.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-discover/node_modules/node-discover/index.js":"module.exports = require('./lib/discover.js');\n","/home/travis/build/npmtest/node-npmtest-node-discover/node_modules/node-discover/lib/discover.js":"/*\n *\n * Node Discover\n *\n * Attributes\n *   Nodes\n *\n * Methods\n *   Promote\n *   Demote\n *   Join\n *   Leave\n *   Advertise\n *   Send\n *   Start\n *   Stop\n *   EachNode(fn)\n *\n * Events\n *   Promotion\n *   Demotion\n *   Added\n *   Removed\n *   Master\n *\n *\n * checkInterval should be greater than hello interval or you're just wasting cpu\n * nodeTimeout must be greater than checkInterval\n * masterTimeout must be greater than nodeTimeout\n *\n */\n\nvar Network = require('./network.js'),\n\tEventEmitter = require('events').EventEmitter,\n\tutil = require('util');\n\nvar reservedEvents = ['promotion', 'demotion', 'added', 'removed', 'master', 'hello'];\n\nmodule.exports = Discover;\n\n/*\n * This is the default automatically assigned weight function in the case that\n * you do not specify a weight, this function will be called. You can override\n * this function if you want to change the default behavior.\n *\n * Example:\n *\n * ```js\n * var Discover = require('discover');\n * Discover.weight = function () {\n * \treturn Math.random();\n * }\n *\n * var d = new Discover();\n * ```\n */\nDiscover.weight = function () {\n\t//default to negative, decimal now value\n\treturn -(Date.now() / Math.pow(10,String(Date.now()).length));\n};\n\nfunction Discover (options, callback) {\n\tif (!(this instanceof Discover)) {\n\t\treturn new Discover(options, callback);\n\t}\n\n\tEventEmitter.call(this);\n\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t\toptions = null;\n\t}\n\n\tvar self = this, checkId, helloId, running = false, options = options || {}\n\n\tvar settings = self.settings = {\n\t\thelloInterval\t: options.helloInterval\t\t|| 1000,\n\t\tcheckInterval\t: options.checkInterval\t\t|| 2000,\n\t\tnodeTimeout\t\t: options.nodeTimeout\t\t|| 2000,\n\t\tmasterTimeout\t: options.masterTimeout\t\t|| 2000,\n\t\taddress\t\t\t: options.address\t\t\t|| '0.0.0.0',\n\t\tport\t\t\t: options.port\t\t\t\t|| 12345,\n\t\tbroadcast\t\t: options.broadcast \t\t|| null,\n\t\tmulticast\t\t: options.multicast \t\t|| null,\n\t\tmulticastTTL \t: options.multicastTTL \t\t|| null,\n\t\tunicast\t\t\t: options.unicast\t\t|| null,\n\t\tkey\t\t\t\t: options.key\t\t\t\t|| null,\n\t\tmastersRequired\t: options.mastersRequired\t|| 1,\n\t\tweight\t\t\t: options.weight\t\t\t|| Discover.weight(),\n\t\tclient\t\t\t: options.client\t\t\t|| (!options.client && !options.server),\n\t\tserver\t\t\t: options.server\t\t\t|| (!options.client && !options.server),\n\t\treuseAddr\t\t: options.reuseAddr, \t\t//default is set at the network layer (true)\n\t\tignoreProcess : (options.ignoreProcess ===  false) ? false : true,\n\t\tignoreInstance : (options.ignoreInstance ===  false) ? false : true\n\t};\n\n\t//this is for backwards compatibilty with v0.1.0\n\t//TODO: should be removed in the next major release\n\tif (options.ignore === false) {\n\t\tsettings.ignoreProcess = false;\n\t\tsettings.ignoreInstance = false;\n\t}\n\n\tif (!(settings.nodeTimeout >= settings.checkInterval)) {\n\t\tthrow new Error(\"nodeTimeout must be greater than or equal to checkInterval.\");\n\t}\n\n\tif (!(settings.masterTimeout >= settings.nodeTimeout)) {\n\t\tthrow new Error(\"masterTimeout must be greater than or equal to nodeTimeout.\");\n\t}\n\n\tself.broadcast = new Network({\n\t\taddress \t: settings.address,\n\t\tport \t\t: settings.port,\n\t\tbroadcast \t: settings.broadcast,\n\t\tmulticast\t: settings.multicast,\n\t\tmulticastTTL: settings.multicastTTL,\n\t\tunicast\t\t: settings.unicast,\n\t\tkey \t\t: settings.key,\n\t\treuseAddr\t: settings.reuseAddr,\n\t\tignoreProcess  : settings.ignoreProcess,\n\t\tignoreInstance  : settings.ignoreInstance\n\t});\n\n\t//This is the object that gets broadcast with each hello packet.\n\tself.me = {\n\t\tisMaster \t: false,\n\t\tisMasterEligible: self.settings.server, //Only master eligible by default if we are a server\n\t\tweight \t\t: settings.weight,\n\t\taddress \t: '127.0.0.1', //TODO: get the real local address?\n\t\tadvertisement\t: options.advertisement\n\t};\n\n\tself.nodes = {};\n\tself.channels = [];\n\n\t/*\n\t * When receiving hello messages we need things to happen in the following order:\n\t * \t- make sure the node is in the node list\n\t * \t- if hello is from new node, emit added\n\t * \t- if hello is from new master and we are master, demote\n\t * \t- if hello is from new master emit master\n\t *\n\t * need to be careful not to over-write the old node object before we have information\n\t * about the old instance to determine if node was previously a master.\n\t */\n\tself.evaluateHello = function (data, obj, rinfo) {\n\t\t//prevent processing hello message from self\n\t\tif (obj.iid === self.broadcast.instanceUuid) {\n\t\t\treturn;\n\t\t}\n\n\t\tdata.lastSeen = +new Date();\n\t\tdata.address = rinfo.address;\n\t\tdata.hostName = obj.hostName;\n\t\tdata.port = rinfo.port;\n\t\tdata.id = obj.iid;\n\t\tvar isNew = !self.nodes[obj.iid];\n\t\tvar wasMaster = null;\n\n\t\tif (!isNew) {\n\t\t\twasMaster = !!self.nodes[obj.iid].isMaster;\n\t\t}\n\n\t\tvar node = self.nodes[obj.iid] = self.nodes[obj.iid] || {};\n\n\t\tObject.getOwnPropertyNames(data).forEach(function (key) {\n\t\t\tnode[key] = data[key];\n\t\t});\n\n\t\tif (isNew) {\n\t\t\t//new node found\n\n\t\t\tself.emit(\"added\", node, obj, rinfo);\n\t\t}\n\n\t\tself.emit(\"helloReceived\", node);\n\n\t\tif (node.isMaster) {\n\t\t\t//if we have this node and it was not previously a master then it is a new master node\n\t\t\tif ((isNew || !wasMaster )) {\n\t\t\t\t//this is a new master\n\n\t\t\t\t//count up how many masters we have now\n\t\t\t\t//initialze to 1 if we are a master\n\t\t\t\tvar masterCount = (self.me.isMaster) ? 1 : 0;\n\t\t\t\tfor (var uuid in self.nodes) {\n\t\t\t\t\tif (self.nodes[uuid].isMaster) {\n\t\t\t\t\t\tmasterCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (self.me.isMaster && masterCount > settings.mastersRequired) {\n\t\t\t\t\tself.demote();\n\t\t\t\t}\n\n\t\t\t\tself.emit(\"master\", node, obj, rinfo);\n\t\t\t}\n\t\t}\n\t};\n\n\tself.broadcast.on(\"hello\", self.evaluateHello);\n\n\tself.broadcast.on(\"error\", function (error) {\n\t\tself.emit(\"error\", error);\n\t});\n\n\tself.check = function () {\n\t\tvar node = null, mastersFound = 0, higherWeightFound = false, removed;\n\n\t\tvar weights = [];\n\n\t\tfor (var processUuid in self.nodes) {\n\t\t\tnode = self.nodes[processUuid];\n\t\t\tremoved = false;\n\n\t\t\tif ( +new Date() - node.lastSeen > settings.nodeTimeout ) {\n\t\t\t\t//we haven't seen the node recently\n\n\t\t\t\t//If node is a master and has not timed out yet based on the masterTimeout then fake it being found\n\t\t\t\tif ( node.isMaster && (+new Date() - node.lastSeen) < settings.masterTimeout ) {\n\t\t\t\t\tmastersFound++;\n\t\t\t\t}\n\n\t\t\t\t//delete the node from our nodes list\n\t\t\t\tdelete self.nodes[processUuid]\n\t\t\t\tremoved = true;\n\t\t\t\tself.emit(\"removed\", node);\n\t\t\t}\n\t\t\telse if (node.isMaster) {\n\t\t\t\tmastersFound++;\n\t\t\t}\n\n\t\t\tif (node.weight > self.me.weight && node.isMasterEligible && !node.isMaster && !removed) {\n\t\t\t\thigherWeightFound = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!self.me.isMaster && mastersFound < settings.mastersRequired && self.me.isMasterEligible && !higherWeightFound) {\n\t\t\t//no masters found out of all our nodes, become one.\n\t\t\tself.promote();\n\t\t}\n\t};\n\n\tself.start = function (callback) {\n\t\tif (running) {\n\t\t\tcallback && callback(null, false);\n\n\t\t\treturn false;\n\t\t}\n\n\t\tself.broadcast.start(function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback && callback(err, false);\n\t\t\t}\n\n\t\t\trunning = true;\n\n\t\t\tcheckId = setInterval(self.check, checkInterval());\n\n\t\t\tif (self.settings.server) {\n\t\t\t\t//send hello every helloInterval\n\t\t\t\thelloId = setInterval(function () {\n\t\t\t\t\tself.hello();\n\t\t\t\t}, helloInterval());\n\t\t\t}\n\n\t\t\treturn callback && callback(null, true);\n\t\t});\n\t};\n\n\tself.stop = function () {\n\t\tif (!running) {\n\t\t\treturn false;\n\t\t}\n\n\t\tself.broadcast.stop();\n\n\t\tclearInterval(checkId);\n\t\tclearInterval(helloId);\n\n\t\trunning = false;\n\t};\n\n\tself.start(callback);\n\n\tfunction helloInterval () {\n\t\tif (typeof settings.helloInterval === 'function') {\n\t\t\treturn settings.helloInterval.call(self);\n\t\t}\n\t\t//else\n\t\treturn settings.helloInterval;\n\t}\n\n\tfunction checkInterval () {\n\t\tif (typeof settings.checkInterval === 'function') {\n\t\t\treturn settings.checkInterval.call(self);\n\t\t}\n\t\t//else\n\t\treturn settings.checkInterval;\n\t}\n};\n\nutil.inherits(Discover, EventEmitter);\n\nDiscover.prototype.promote = function () {\n\tvar self = this;\n\n\tself.me.isMasterEligible = true;\n\tself.me.isMaster = true;\n\tself.emit(\"promotion\", self.me);\n\tself.hello();\n};\n\nDiscover.prototype.demote = function (permanent) {\n\tvar self = this;\n\n\tself.me.isMasterEligible = !permanent;\n\tself.me.isMaster = false;\n\tself.emit(\"demotion\", self.me);\n\tself.hello();\n};\n\nDiscover.prototype.hello = function () {\n\tvar self = this;\n\n\tself.broadcast.send(\"hello\", self.me);\n\tself.emit(\"helloEmitted\");\n};\n\nDiscover.prototype.advertise = function (obj) {\n\tvar self = this;\n\n\tself.me.advertisement = obj;\n};\n\nDiscover.prototype.eachNode = function (fn) {\n\tvar self = this;\n\n\tfor ( var uuid in self.nodes ) {\n\t\tfn(self.nodes[uuid]);\n\t}\n};\n\nDiscover.prototype.join = function (channel, fn) {\n\tvar self = this;\n\n\tif (~reservedEvents.indexOf(channel)) {\n\t\treturn false;\n\t}\n\n\tif (~self.channels.indexOf(channel)) {\n\t\treturn false;\n\t}\n\n\tif (fn) {\n\t\tself.on(channel, fn);\n\t}\n\n\tself.broadcast.on(channel, function (data, obj, rinfo) {\n\t\tself.emit(channel, data, obj, rinfo);\n\t});\n\n\tself.channels.push(channel);\n\n\treturn true;\n};\n\nDiscover.prototype.leave = function (channel) {\n\tvar self = this;\n\n\tself.broadcast.removeAllListeners(channel);\n\n\tdelete self.channels[self.channels.indexOf(channel)];\n\n\treturn true;\n};\n\nDiscover.prototype.send = function (channel, obj) {\n\tvar self = this;\n\n\tif (~reservedEvents.indexOf(channel)) {\n\t\treturn false;\n\t}\n\n\tself.broadcast.send(channel, obj);\n\n\treturn true;\n};\n","/home/travis/build/npmtest/node-npmtest-node-discover/node_modules/node-discover/lib/network.js":"var dgram = require('dgram'),\n    crypto = require('crypto'),\n    os = require('os'),\n    EventEmitter = require('events').EventEmitter,\n    util = require('util'),\n    uuid = require('node-uuid'),\n    nodeVersion = process.version.replace('v','').split(/\\./gi).map(function (t) { return parseInt(t, 10) });\n\nvar procUuid = uuid.v4();\nvar hostName = os.hostname();\n\nmodule.exports = Network; \n \nfunction Network (options) {\n    if (!(this instanceof Network)) {\n        return new Network(options, callback);\n    }\n\n    EventEmitter.call(this);\n\n    var self = this, options = options || {};\n\n    self.address        = options.address   || '0.0.0.0';\n    self.port           = options.port      || 12345;\n    self.broadcast      = options.broadcast || null;\n    self.multicast      = options.multicast || null;\n    self.multicastTTL   = options.multicastTTL || 1;\n    self.unicast        = options.unicast   || null;\n    self.key            = options.key       || null;\n    self.reuseAddr      = (options.reuseAddr === false) ? false : true;\n    self.ignoreProcess  = (options.ignoreProcess ===  false) ? false : true;\n    self.ignoreInstance = (options.ignoreInstance ===  false) ? false : true;\n\n    if (nodeVersion[0] === 0 && nodeVersion[1] < 12) {\n        //node v0.10 does not support passing an object to dgram.createSocket\n        //not sure if v0.11 does, but assuming it does not.\n        self.socket = dgram.createSocket('udp4');\n    }\n    else {\n        self.socket = dgram.createSocket({type: 'udp4', reuseAddr: self.reuseAddr });\n    }\n\n    self.instanceUuid = uuid.v4();\n    self.processUuid = procUuid;\n\n    self.socket.on(\"message\", function ( data, rinfo ) {\n        self.decode(data, function (err, obj) {\n            if (err) {\n                //most decode errors are because we tried\n                //to decrypt a packet for which we do not\n                //have the key\n\n                //the only other possibility is that the\n                //message was split across packet boundaries\n                //and that is not handled\n\n                //self.emit(\"error\", err);\n            }\n            else if (obj.pid == procUuid && self.ignoreProcess && obj.iid !== self.instanceUuid) {\n                    return false;\n            }\n            else if (obj.iid == self.instanceUuid && self.ignoreInstance) {\n                    return false;\n            }\n            else if (obj.event && obj.data) {\n                self.emit(obj.event, obj.data, obj, rinfo);\n            }\n            else {\n                self.emit(\"message\", obj)\n            }\n        });\n    });\n\n    self.on(\"error\", function (err) {\n        //TODO: Deal with this\n        /*console.log(\"Network error: \", err.stack);*/\n    });\n};\n\nutil.inherits(Network, EventEmitter);\n\nNetwork.prototype.start = function (callback) {\n    var self = this;\n\n    self.socket.bind(self.port, self.address, function () {\n        if (self.unicast) {\n            if (typeof self.unicast === 'string' && ~self.unicast.indexOf(',')) {\n                self.unicast = self.unicast.split(',');\n            }\n\n            self.destination = [].concat(self.unicast);\n        }\n        else if (!self.multicast) {\n            //Default to using broadcast if multicast address is not specified.\n            self.socket.setBroadcast(true);\n\n            //TODO: get the default broadcast address from os.networkInterfaces() (not currently returned)\n            self.destination = [self.broadcast || \"255.255.255.255\"];\n        }\n        else {\n            try {\n                //addMembership can throw if there are no interfaces available\n                self.socket.addMembership(self.multicast);\n                self.socket.setMulticastTTL(self.multicastTTL);\n            }\n            catch (e) {\n                self.emit('error', e);\n\n                return callback && callback(e);\n            }\n\n            self.destination = [self.multicast];\n        }\n\n        return callback && callback();\n    });\n};\n\nNetwork.prototype.stop = function (callback) {\n    var self = this;\n\n    self.socket.close();\n\n    return callback && callback();\n};\n\nNetwork.prototype.send = function (event) {\n    var self = this;\n\n    var obj = {\n        event : event,\n        pid : procUuid,\n        iid : self.instanceUuid,\n        hostName : hostName\n    };\n\n    if (arguments.length == 2) {\n        obj.data = arguments[1];\n    }\n    else {\n        //TODO: splice the arguments array and remove the first element\n        //setting data to the result array\n    }\n\n    self.encode(obj, function (err, contents) {\n        if (err) {\n            return false;\n        }\n\n        var msg = new Buffer(contents);\n        \n        self.destination.forEach(function (destination) {\n            self.socket.send(\n                msg\n                , 0\n                , msg.length\n                , self.port\n                , destination\n            );\n        });\n    });\n};\n\nNetwork.prototype.encode = function (data, callback) {\n    var self = this\n        , tmp\n        ;\n\n    try {\n        tmp = (self.key)\n            ? encrypt(JSON.stringify(data),self.key)\n            : JSON.stringify(data)\n            ;\n    }\n    catch (e) {\n        return callback(e, null);\n    }\n\n    return callback(null, tmp);\n};\n\nNetwork.prototype.decode = function (data, callback) {\n    var self = this\n        , tmp\n        ;\n\n    try {\n        if (self.key) {\n        tmp = JSON.parse(decrypt(data.toString(),self.key));\n        }\n        else {\n            tmp = JSON.parse(data);\n        }\n    }\n    catch (e) {\n        return callback(e, null);\n    }\n\n    return callback(null, tmp);\n};\n\nfunction encrypt (str, key) {\n    var buf = [];\n    var cipher = crypto.createCipher('aes256', key);\n\n    buf.push(cipher.update(str, 'utf8', 'binary'));\n    buf.push(cipher.final('binary'));\n\n    return buf.join('');\n};\n\nfunction decrypt (str, key) {\n    var buf = [];\n    var decipher = crypto.createDecipher('aes256', key);\n\n    buf.push(decipher.update(str, 'binary', 'utf8'));\n    buf.push(decipher.final('utf8'));\n\n    return buf.join('');\n};\n"}